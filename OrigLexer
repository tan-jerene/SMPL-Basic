/* Specification for ECOLI tokens */

// user customisations
import java_cup.runtime.*;

%%

%cup
%public

%class SMPLLexer

%type java_cup.runtime.Symbol

%eofval{
	return new Symbol(sym.EOF);
%eofval}

%state STRING

%state COMMENT

%char
%line

%{
    public int getChar()
    {
	return yychar + 1;
    }

    public int getLine()
    {
	return yyline + 1;
    }

    public String getText()
    {
	return yytext();
    }
%}
      
nl = [\n\r]

cc = [\b\f]|{nl}

ws = ({cc}|[\t" "])

num = [0-9]
alpha = [A-Za-z_]
char = [+-*#.?!]
alphanum = ({alpha}|{num})
alnumextend = ^{alphanum}({char}|{alphanum})+

COMMENT_TEXT=([^/*\n]|[^*\n]"/"[^*\n]|[^/\n]"*"[^/\n]|"*"[^/\n]|"/"[^*\n])*

%%
<YYINITIAL>	"."	{ //. on a line by itself is EOF
			  return new Symbol(sym.EOF);}

<YYINITIAL>    {nl} {
                        //skip newline, but reset char counter
                        yychar = 0;
                      }
<YYINITIAL>    \#.*  { // ignore line comments
                      }
<YYINITIAL>    {ws} { // ignore whitespace
                      }

<YYINITIAL>    , { return new Symbol(sym.COMMA);}
<YYINITIAL>    ; { return new Symbol(sym.SEMI);}
<YYINITIAL>    : { return new Symbol(sym.COLON);}
<YYINITIAL>    "(" { return new Symbol(sym.LPAREN);}
<YYINITIAL>    ")" { return new Symbol(sym.RPAREN);}
<YYINITIAL>    "[" { return new Symbol(sym.LBRACKET);}
<YYINITIAL>    "]" { return new Symbol(sym.RBRACKET);}
<YYINITIAL>    "{" { return new Symbol(sym.LCBRACKET);} 
<YYINITIAL>    "}" { return new Symbol(sym.RCBRACKET);} 
<YYINITIAL>		"#t" { return new Symbol(sym.TRUE); }
<YYINITIAL>   "#f" { return new Symbol(sym.FALSE); }
<YYINITIAL>		"#e" { return new Symbol(sym.ELIST); }
<YYINITIAL>		"@"	 { return new Symbol(sym.CON); }
<YYINITIAL>		"[:" { return new Symbol(sym.VECHEAD); }
<YYINITIAL>		":]" { return new Symbol(sym.VECEND); }

<YYINITIAL>    end|END { return new Symbol(sym.END);}

<YYINITIAL>    ":=" { return new Symbol(sym.ASSIGN); }

<YYINITIAL>    in|IN { return new Symbol(sym.IN); }

<YYINITIAL>    def|DEF { return new Symbol(sym.DEF); }

<YYINITIAL>    proc|PROC { return new Symbol(sym.PROC); }

<YYINITIAL>    print|PRINT { return new Symbol(sym.PRINT); }

<YYINITIAL>    println|PRINTLN { return new Symbol(sym.PRINTLN); }

<YYINITIAL>		 read|READ {return new Symbol(sym.READ); }

<YYINITIAL>		 readint|READINT {return new Symbol(sym.READINT); }

<YYINITIAL>    pair|PAIR { return new Symbol(sym.PAIR); }

<YYINITIAL>    car|CAR { return new Symbol(sym.CAR); }

<YYINITIAL>    cdr|CDR { return new Symbol(sym.CDR); }

<YYINITIAL>    list|LIST { return new Symbol(sym.LIST); }

<YYINITIAL>    size|SIZE { return new Symbol(sym.SIZE); }

<YYINITIAL>    eqv|EQV { return new Symbol(sym.EQV); }

<YYINITIAL>    equal|EQUAL { return new Symbol(sym.EQUAL); }

<YYINITIAL>    substr|SUBSTR { return new Symbol(sym.SUBSTR); }

<YYINITIAL>    if|IF { return new Symbol(sym.IF); }

<YYINITIAL>    or|OR { return new Symbol(sym.OR); }

<YYINITIAL>    and|AND { return new Symbol(sym.AND); }

<YYINITIAL>    not|NOT { return new Symbol(sym.NOT); }

<YYINITIAL>    then|THEN { return new Symbol(sym.THEN); }

<YYINITIAL>		 else|ELSE { return new Symbol(sym.ELSE); }

<YYINITIAL>    let|LET { return new Symbol(sym.LET); }

<YYINITIAL>		 be|BE	{ return new Symbol(sym.BE);}

<YYINITIAL>    wait|WAIT    { return new Symbol(sym.WAIT); }

<YYINITIAL>		 binfunc|BINFUNC { return new Symbol(sym.BINFUNC); }

<YYINITIAL>		 binquery|BINQUERY { return new Symbol(sym.BINQUERY); }

<YYINITIAL> 	 lazy|LAZY { return new Symbol(sym.LAZY); }

<YYINITIAL>		 call|CALL { return new Symbol(sym.CALL); }

<YYINITIAL>		 case|CASE { return new Symbol(sym.CASE); }



<YYINITIAL>    "<"|">"|"<="|">="|"=="|"!="  { return new Symbol(sym.CMP, yytext()); }

<YYINITIAL>    "+" { return new Symbol(sym.PLUS); }
<YYINITIAL>    "++" { return new Symbol(sym.INC); }
<YYINITIAL>    "-" { return new Symbol(sym.MINUS); }
<YYINITIAL>    "--" { return new Symbol(syM.DEC); }
<YYINITIAL>    "*" { return new Symbol(sym.TIMES); }
<YYINITIAL>    "/" { return new Symbol(sym.DIV); }
<YYINITIAL>    "%" { return new Symbol(sym.MOD); }
<YYINITIAL>    "^" { return new Symbol(sym.POW); }
<YYINITIAL>    "?" { return new Symbol(sym.QUERY); }


<YYINITIAL,COMMENT> \n { }
<YYINITIAL> "/*" { yybegin(COMMENT); comment_count = comment_count + 1; }

<COMMENT> "/*" { comment_count = comment_count + 1; }
<COMMENT> "*/" { 
	comment_count = comment_count - 1; 
	//Utility.assert(comment_count >= 0);
	if (comment_count == 0) {
    		yybegin(YYINITIAL);
	}
}

<YYINITIAL> "//" { yybegin(COMMENT);  }


<COMMENT> {COMMENT_TEXT} { }


<YYINITIAL>	{alnumextend} {
			// IDENTIFIER
			return new Symbol(sym.VAR, yytext()); }

<YYINITIAL>    	{num}+ {
	       		// INTEGER
	       		return new Symbol(sym.INTEGER, new Integer(yytext()));
	       	}

<YYINITIAL>     0?"."{num}+ {
			// FRACTION
			return new Symbol(sym.FRACTION, new Double(yytext()));
		}

<YYINITIAL>	{num}+"."{num}+ {
			return new Symbol(sym.REAL, new Double(yytext()));
		}

<YYINITIAL> "#x"{num}+ {
			int val = Integer.decode("0"+yytext().substring(1,yytext().length()));
			String val1 = "" + val;
			return new Symbol(sym.HEXINT, new Integer(val1));
		}

<YYINITIAL> "#b"{num}+ {
			int val = Integer.parseInt(yytext().substring(2,yytext().length()), 2);
			String val1 = "" + val;
			return new Symbol(sym.BININT, new Integer(val1));
		}

<YYINITIAL> \'{alphanum}\' {
      return new Symbol(sym.CHAR, yytext().substring(1, yytext()-1));
    }

<YYINITIAL>	\" {
			yybegin(STRING);
		}

<YYINITIAL>	. {
		    throw new java.io.IOException("Unrecognised character: " +
							yytext());
		}

<STRING>	\" {
			yybegin(YYINITIAL);
		}

<STRING>	[^\"]* {
			// constant string
			// System.out.println(yytext());
			return new Symbol(sym.STRING, yytext());
		}
